# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.2.1'
        build-root-directory: './capstone'

    - name: Build with Gradle Wrapper
      run: |
        cd capstone
        chmod +x ./gradlew
        ./gradlew build

    - name: Login Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}        

    - name: Build docker image & Push
      run: |
        cd capstone
        docker build -t chanyoungpark9974/urmovie_back .
        docker push chanyoungpark9974/urmovie_back:latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Copy deploy files
      run: |
        cd capstone
        mkdir deploy
        cp deploy.sh appspec.yml deploy/

    - name: Export docker image
      run: docker save chanyoungpark9974/urmovie_back:latest > capstone/deploy/urmovie_back.tar

    - name: Upload files to deploy.zip
      run: |
        cd capstone/deploy
        zip urmovie_backend.zip urmovie_back.tar deploy.sh appspec.yml
        aws s3 cp urmovie_backend.zip s3://urmovie-buckets/deploy/

    - name: Trigger deployment to CodeDeploy
      run: |
          aws deploy create-deployment \
            --application-name urmovie-backend-deploy \
            --deployment-group-name spring-deploy-group \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --description "Deployment from GitHub" \
            --region us-east-2 \
            --s3-location bucket=urmovie-buckets,key=deploy/urmovie_backend.zip,bundleType=zip
      
      